

# This file was *autogenerated* from the file exp4.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x8bc8479ebf10dc1a4c24d6dfd6effd0437969eebf67654bc5c495bf2577f15226c15b9793ce9363c5986c485c2932fc7e7e6daac8dc108cca6d1b3850353fa2f = Integer(0x8bc8479ebf10dc1a4c24d6dfd6effd0437969eebf67654bc5c495bf2577f15226c15b9793ce9363c5986c485c2932fc7e7e6daac8dc108cca6d1b3850353fa2f); _sage_const_0x3 = Integer(0x3); _sage_const_0x87c05b7868cf54a58e19fe7a969a0213101f045e2afbf7547534564e918b62caa8187c773a8168ff464b20c28ce0e33383a600351883bb0938b2ecf0c45d59f3 = Integer(0x87c05b7868cf54a58e19fe7a969a0213101f045e2afbf7547534564e918b62caa8187c773a8168ff464b20c28ce0e33383a600351883bb0938b2ecf0c45d59f3); _sage_const_0x666c6167206973203a3739306666373532653338393838613532000000000000000000000000000000 = Integer(0x666c6167206973203a3739306666373532653338393838613532000000000000000000000000000000); _sage_const_120 = Integer(120); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from Crypto.Util.number import long_to_bytes

n = _sage_const_0x8bc8479ebf10dc1a4c24d6dfd6effd0437969eebf67654bc5c495bf2577f15226c15b9793ce9363c5986c485c2932fc7e7e6daac8dc108cca6d1b3850353fa2f 
e = _sage_const_0x3 
c = _sage_const_0x87c05b7868cf54a58e19fe7a969a0213101f045e2afbf7547534564e918b62caa8187c773a8168ff464b20c28ce0e33383a600351883bb0938b2ecf0c45d59f3 
mbar = _sage_const_0x666c6167206973203a3739306666373532653338393838613532000000000000000000000000000000 
kbits = _sage_const_120 

PR = PolynomialRing(Zmod(n), names=('x',)); (x,) = PR._first_ngens(1)
f = (mbar + x)**e - c

x0 = f.small_roots(X=_sage_const_2 **kbits, beta=_sage_const_1 )[_sage_const_0 ]  # find root < 2^kbits with factor = n
print("m:", mbar + x0)
m = mbar + x0
print(long_to_bytes(m))

