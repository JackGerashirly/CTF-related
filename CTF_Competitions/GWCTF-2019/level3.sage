# -*- coding:utf-8 -*-
from sage.all import *
n = 0xeb4f8c45336c229371fd73a252b24dd3bf8b3cdc1bb1864f140fd63c88d47c44ba228bebe223fe53c7eaf88678b780821a6660b2726506216554990a5dda178ee04a47c7f1974fc8f8268d081bbb2be7e7353ccf36fecfce5f5f82722d064928f2d60844373c52b4d1db9dc41f7f16807c5b4356c4d2290811e25c51ef1227aa6e893d37dd8743e391fa638d77d0c55e4fb331576602128333d4be95f06523521e7511b39fc20111c88f2635b67e3531684d58ea6574179b5e63a862d073241f5ff91c97a45aa3d8e3287d8161a97728d2e19d72669f39f9e6ad10677bb563bdef30d0dcfa719c2f1836bd02b73d21dbecc11717b54c45d415d3f423ce6dfd8d
p4 = 0xfb2151c701f7667b53822fe625b95edee00c3a947b234eca47903ef62fb128d813a9c1acb328f3f7181d24ce31814cd1a69ac4b61b269e2b0eb7fbaabe9633d33a36d0715b4cd3860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cipher = 0x578620facc67a53183f1e68a010559969dcd5e20b91ac73c8277fd1c24965dea469884df2964204b37290cbe5359632db7afe4fc1ab3116e3ed91788cb99724baf0e98542ed273bc21b3c2e14ed197bf21764cf42e7975da493a28e88e4695ef49d88b68c38c69c4cbf152c4c44da19c2b38faf78f02973701a1f804e9f0cf2a0604932c5db83d18f9ba868171d04a0389d9a1a36482f935328adb3501f50008e167ad4066089780e2392b9f0ec61567a0323f2652a2d815e793e293a6c8357df692ffdcbf4384fb63448de2d13625a3089d8e7831e9d3942f7b160b47f9dd6f29911f9d34c8d6888ca11d226bc3df9f2a8d8ba75a6cece3b59a99b962cf7adeL
e2 = 65537
kbits = 448  #未知需要爆破的比特位数
PR.<x> = PolynomialRing(Zmod(n))
f = x + p4
roots = f.small_roots(X=2^kbits, beta=0.4) #进行爆破
if roots:        #爆破成功，求根
    p = p4+int(roots[0])
    assert n % p == 0
    q = n/int(p)
    phin = (p-1)*(q-1)
    d = inverse_mod(e2,phin)
    flag = pow(cipher,d,n)
    print flag
