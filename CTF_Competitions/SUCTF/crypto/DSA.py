# -*-coding:utf-8 -*-
# 共享k攻击
import gmpy2
import hashlib


def dsa_sharing_k_attack(q, r, m1, m2, s1, s2):  # q 为公钥元素，r 为共享了k的签名中的元素，m1,m2为hash函数加密后的密文，s1,s2为共享了k的签名中的元素
    dm = m1 - m2
    ds = s1 - s2
    ds_inv = gmpy2.invert(ds, q)
    k = gmpy2.f_mod((dm * ds_inv), q)  # 求得k
    r_inv = gmpy2.invert(r, q)
    x = gmpy2.f_mod(((s1 * k - m1) * r_inv), q)  # 求得x
    return k, x


def create_fake_signature(p, q, g, k, x, m, r):
    k_inv = gmpy2.invert(k, q)
    s = gmpy2.f_mod((k_inv * (m + x * r)), q)  # 求得伪造签名元素 s
    return s


# 写入公钥参数
p = 89884656743115795580686663829063433723705316331915518116995555215732107995059028542508401244839154951727540560161931978595376162965578570688594466436802284147607626105578924348149452183916543288346766737451989059750506942292767656446346135964708979885460659773076011464167414551120634816058711585048191954497
q = 1111804377363103506497255080558092668997313464491
g = 81015871603456981032885262867256289415428185718067221863176015480426278916784273932461088597278453025238130171264554340337052290801398971212149002598733514497274080038687844873045392142055341888546884513467006243654622193996237786587933291936305860861104505778330178660321910982065964185311229731036440300912
y = 24205967076065946398939942966555243225474145978138314135133201932616151998778053968114291774217862261420967723355996662814191035892360634754604901035581578539634376520187757713469318847622699231634156440729178396025399617453913697005440949117064991219553520585024955478025227096450962672242862991836900979588

# 写入签名元素
r = 1110285731834476772119910400331516120389395795749
s1 = 671563422243860980520073471433161684440141852624
s2 = 218895397309026853341136197466419726836220239272

# 写入hash加密后的密文
m1 = 189275664133327295485034625257633857845
m2 = 76447611971473350019028042637993930502


m = "And nothing 'gainst Time's scythe can make defence"
m = hashlib.md5(m.encode()).digest()  # md5加密成字符串形式
m = int(m.encode('hex'), 16)  # 转为十进制形式
k, x = dsa_sharing_k_attack(q, r, m1, m2, s1, s2)
s = create_fake_signature(p, q, g, k, x, m, r)
print "k:", k
print "x:", x
print "Creating fake signature: "
print "r:", r
print "s:", s

# 脚本检验样本：
# 找到一组同r的数据
# And see the brave day sunk in hideous night
# Its MD5 digest: 189275664133327295485034625257633857845
# (1110285731834476772119910400331516120389395795749L, 671563422243860980520073471433161684440141852624L)
# ------------------------------------------------------------------------
# And sable curls all silver'd o'er with white
# Its MD5 digest: 76447611971473350019028042637993930502
# (1110285731834476772119910400331516120389395795749L, 218895397309026853341136197466419726836220239272L)
# 明文 m = """And nothing 'gainst Time's scythe can make defence"""
