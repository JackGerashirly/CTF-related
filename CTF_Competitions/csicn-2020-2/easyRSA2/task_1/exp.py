from Crypto.Util.number import isPrime, inverse, bytes_to_long, long_to_bytes
from random import randint
from libnum import gcd

m = 31412515
N = 20810957009276106793407213910378661196121487687823746048122155641218542460826730219110656287101260168946938791461059505814922118515467109509837349680754090608255504526134410351463656255691783971444571054522453022800126929469043167030391678846170049623981035076358138786501749472609158363456145355371459844126461090570363853528625626105278328302124774326540071764723428549101629873760220706844175555426584061941559726039964237456357385035695064652549354921445248608377193556548812135468913090861015290434175512233678163185595303365514323264097974212600785941588676627766702571648150080528511340232845880170920561238451

def lfsr(R, mask):
    out = (R << 1) & 0xffffff
    bit = (R & mask) & 0xffffff
    out_bit = 0
    while bit != 0:
        out_bit ^= (bit & 1)
        bit = bit >> 1
    out ^= out_bit
    return out, out_bit


def genPrime(R, mask, bit):
    count = 0
    while True:
        prime = 0
        for i in range(bit):
            (R, out) = lfsr(R, mask)
            prime = (prime << 1) ^ out
        if isPrime(prime):
            yield prime


def mul(a, b):
    ans = 0
    for i in range(len(a)):
        ans ^= a[i] & b[i]
    return ans


mask = list('101011000100100100000100')
e = 16069787
e = list(bin(e)[2:])

e = [int(e[i]) for i in range(24)]
mask = [int(mask[i]) for i in range(24)]
down = e
for i in range(240):
    for j in range(2):
        r = [j]
        r.extend(down[:-1-i])
        if mul(r, mask) == down[-1-i]:
            r = [j]
            r.extend(down)
            down = r
            break

mask = 0b101011000100100100000100
pos = []
down= [str(down[i]) for i in range(240)]
for i in range(10):
    pos.append(int(''.join(down[i*24: (i+1)* 24]), 2))
for eve in pos:
    gen = genPrime(eve, mask, 1024)
    p = gen.next()
    if N % p == 0:
        q = N / p
        break
phi = (p - 1) * (q - 1)
d = inverse(16069787, phi)
c = 6684964915220118582967779339778281191480721331277264008727956905412522191891577318496811103479236535162902002849402158576209369365216871215970298759907612506858782907695363640961486949954737422674241319324005824608432362870601503195732749418913837430005734723713418265367674478034958636210553558710255343852430555289083769122915746460520527901281000640322695067600645854331373546357250717419234641975207055438310902263460786023264083276241993777033019403958870974651300443284267874897661821470295678104777173473067115481628462826806003468946251426791453198705124293359121586511241439875401814776017696707984182021387
flag = long_to_bytes(pow(c, d, N))
print(flag)
