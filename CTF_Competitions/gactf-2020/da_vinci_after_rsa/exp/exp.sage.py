

# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_421363015174981309103786520626603807427915973516427836319727073378790974986429057810159449046489151 = Integer(421363015174981309103786520626603807427915973516427836319727073378790974986429057810159449046489151); _sage_const_9749 = Integer(9749); _sage_const_11237753507624591 = Integer(11237753507624591); _sage_const_9127680453986244150392840833873266696712898279308227257525736684312919750469261 = Integer(9127680453986244150392840833873266696712898279308227257525736684312919750469261); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_28657 = Integer(28657); _sage_const_3 = Integer(3); _sage_const_17711 = Integer(17711); _sage_const_8 = Integer(8); _sage_const_13 = Integer(13); _sage_const_21 = Integer(21); _sage_const_46368 = Integer(46368); _sage_const_75025 = Integer(75025); _sage_const_34 = Integer(34); _sage_const_55 = Integer(55); _sage_const_89 = Integer(89); _sage_const_610 = Integer(610); _sage_const_377 = Integer(377); _sage_const_144 = Integer(144); _sage_const_233 = Integer(233); _sage_const_1597 = Integer(1597); _sage_const_2584 = Integer(2584); _sage_const_4181 = Integer(4181); _sage_const_6765 = Integer(6765); _sage_const_10946 = Integer(10946); _sage_const_987 = Integer(987)
from Crypto.Util.number import long_to_bytes
import itertools

c = _sage_const_421363015174981309103786520626603807427915973516427836319727073378790974986429057810159449046489151 
pa = _sage_const_9749 
pb = _sage_const_11237753507624591 
pc = _sage_const_9127680453986244150392840833873266696712898279308227257525736684312919750469261 
# factor with yafu

mas = GF(pa)(c).nth_root(_sage_const_5 , all=True) # find 5-th root in modulus pa, so do below
mbs = GF(pb)(c).nth_root(_sage_const_5 , all=True)
mcs = GF(pc)(c).nth_root(_sage_const_5 , all=True)
# algl = True, which means find all roots, otherwise...
# all = False is default

# find all possible m
ms = [] 
for ma, mb, mc in itertools.product(mas, mbs, mcs): 
    m = ZZ(crt(list(map(ZZ,[ma,mb,mc])), [pa,pb,pc]))
    mi = long_to_bytes(m)
    if mi[:_sage_const_4 ] == b'flag':
        flag = mi[_sage_const_5 :-_sage_const_1 ]

print(flag)

# decrypt da vinci encryption
fb = [_sage_const_1 ,_sage_const_1 ]
LEN = len(flag)
while len(fb) < LEN:
    fb.append(fb[-_sage_const_1 ] + fb[-_sage_const_2 ])
fb[_sage_const_0 ] = _sage_const_0 
enc = [_sage_const_0 ,_sage_const_28657 ,_sage_const_2 ,_sage_const_1 ,_sage_const_3 ,_sage_const_17711 ,_sage_const_5 ,_sage_const_8 ,_sage_const_13 ,_sage_const_21 ,_sage_const_46368 ,_sage_const_75025 ,_sage_const_34 ,_sage_const_55 ,_sage_const_89 ,_sage_const_610 ,_sage_const_377 ,_sage_const_144 ,_sage_const_233 ,_sage_const_1597 ,_sage_const_2584 ,_sage_const_4181 ,_sage_const_6765 ,_sage_const_10946 ,_sage_const_987 ]
r_flag = [flag[fb.index(enc[i])] for i in range(LEN)]
for i in r_flag:
    print(chr(i),end='')



