from Crypto.Util.number import long_to_bytes
N = 598756982846857855564861803797067906933452532971372536192231
p = 773793889124783574343562335367
q = 773793889124783574343613279393
C = 4480960863875584511148612202888184984874434295853921
P1x = 40868726519566019162794925971370501749760105301423309229554
P1y = 54687980868371628310908123178978977864897123871328723
P2x = 235149117685317066108245267690004572936544028030457002179126
P2y = 1289371238921298371232163781261298731812137628190
P3x = 230807308713660443214609900462802224133677339138938919914236
P3y = 15979270783196203822523802015845150885928738960540101206481
P4x = 48539794908526618490272854315619275063139157075919926757183
P4y = 253317587580758121061061480314672531383057603048054780326781


F = IntegerModRing(N)
A = ((P1y^2 - C - P1x^3) * inverse_mod(P1x,N)) % N
B = (P2y ^ 2 - P2x ^ 3 - A * P2x) % N

Eq = EllipticCurve(GF(q), [A, B])
Ep =  EllipticCurve(GF(p), [A, B])
P2q = Eq(P2x,P2y)
P2p = Ep(P2x,P2y)
P3q = Eq(P3x,P3y)
P3p = Ep(P3x,P3y)
P4q = Eq(P4x,P4y)
P4p = Ep(P4x,P4y)
oq = Eq.order()
op = Ep.order()
m1q = discrete_log(P3q,P2q,oq,operation='+')
m1p = discrete_log(P3p,P2p,op,operation='+')
m1 = CRT([m1p,m1q],[op,int(oq)//gcd(op,oq)]) # modulus are pairwise coprime
m2q = discrete_log(P4q,P2q,oq,operation='+')
m2p = discrete_log(P4p,P2p,op,operation='+')
m2 = CRT([m2p,m2q],[op,int(oq)//gcd(op,oq)]) # modulus are pairwise coprime
print(long_to_bytes(m1) + long_to_bytes(m2))

# b'flag{de7a89ab1d074ef3930fb3054c0e3ac8}'