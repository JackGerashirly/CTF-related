from Crypto.Util.number import *
 
def lift(f, p, k, previous):
    result = []
    df = diff(f)
    for lower_solution in previous:
        dfr = Integer(df(lower_solution))
        fr = Integer(f(lower_solution))
        if dfr % p != 0:
            t = (-(xgcd(dfr, p)[1]) * int(fr / p ** (k - 1))) % p
            result.append(lower_solution + t * p ** (k - 1))
        if dfr % p == 0:
            if fr % p ** k == 0:
                for t in range(0, p):
                    result.append(lower_solution + t * p ** (k - 1))
    return result
 
def hensel_lifting(f, p, k, base_solution):
    solution = base_solution
    for i in range(2, k + 1):
        solution = lift(f, p, i, solution)
    return solution
 
if __name__=="__main__":
    #base = [27020,25020]
    base = [71914448]
    p = 91178819
    k = 120
    N = p^k
    P.<x> = PolynomialRing(Zmod(N), implementation='NTL')
    f = 57453455752934422314569380490870437392139092788674299919611253252932221869550680569946725024530545003*x^4 + 48037906924411573201214693262554265057001265856059030798403001287597455830201673623580499809814145397*x^3 + 115978529756755271495684497597111489575180207439819530844214796357232008531997740692954971387805647169*x^2 + 90144181335780729761572136076745420392729113384422074643542473780101371704844686670328386988693003565*x + 15391307705240277278890263165432140210177612531692370138228866751525717915844630600454114316817767347237410103825891623720982676085014910889900050564292685762014395155362574870811426331093375257234685605632632665945906781957636758863633857453440902818467506862994716985071078742637470209975218157566199744899513967029548028126417040526508345337196021889482286023256338442270711332457021150881328372306307158084639537132701296810708211240517552171001258318265080522140684915746401253066679720255872700102642721647928067158080049850626073426063356187938363644873928284413044082195265066444624399404805990964473348796290240520637015040450522056216046061514855949283976028501383885079871184350334880950826925674190842626492485432769357092486284047237776336391752959868191708104998859612329034138201867198495897106145496766577408003296902815140152148936337282162436442452632231320117066224252199246120829466402954585288911632249785731492040264164216078655949851
    solutions = hensel_lifting(f,p,k,base)
    for solution in solutions:
        print (long_to_bytes(solution))
# b'flag{b3cfcea8-6cca-11ea-bc55-0242ac130003}'
